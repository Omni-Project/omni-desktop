{
  "_args": [
    [
      {
        "raw": "document-register-element@github:dmarcos/document-register-element#8ccc532b7",
        "scope": null,
        "escapedName": "document-register-element",
        "name": "document-register-element",
        "rawSpec": "github:dmarcos/document-register-element#8ccc532b7",
        "spec": "github:dmarcos/document-register-element#8ccc532b7",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:dmarcos/document-register-element.git#8ccc532b7",
          "sshUrl": "git+ssh://git@github.com/dmarcos/document-register-element.git#8ccc532b7",
          "httpsUrl": "git+https://github.com/dmarcos/document-register-element.git#8ccc532b7",
          "gitUrl": "git://github.com/dmarcos/document-register-element.git#8ccc532b7",
          "shortcut": "github:dmarcos/document-register-element#8ccc532b7",
          "directUrl": "https://raw.githubusercontent.com/dmarcos/document-register-element/8ccc532b7/package.json"
        }
      },
      "/Users/laurajeong/Desktop/dreamscape-desktop/node_modules/aframe"
    ]
  ],
  "_from": "dmarcos/document-register-element#8ccc532b7",
  "_id": "document-register-element@0.5.4",
  "_inCache": true,
  "_location": "/document-register-element",
  "_phantomChildren": {},
  "_requested": {
    "raw": "document-register-element@github:dmarcos/document-register-element#8ccc532b7",
    "scope": null,
    "escapedName": "document-register-element",
    "name": "document-register-element",
    "rawSpec": "github:dmarcos/document-register-element#8ccc532b7",
    "spec": "github:dmarcos/document-register-element#8ccc532b7",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:dmarcos/document-register-element.git#8ccc532b7",
      "sshUrl": "git+ssh://git@github.com/dmarcos/document-register-element.git#8ccc532b7",
      "httpsUrl": "git+https://github.com/dmarcos/document-register-element.git#8ccc532b7",
      "gitUrl": "git://github.com/dmarcos/document-register-element.git#8ccc532b7",
      "shortcut": "github:dmarcos/document-register-element#8ccc532b7",
      "directUrl": "https://raw.githubusercontent.com/dmarcos/document-register-element/8ccc532b7/package.json"
    }
  },
  "_requiredBy": [
    "/aframe"
  ],
  "_resolved": "git://github.com/dmarcos/document-register-element.git#8ccc532b7f3744be954574caf3072a5fd260ca90",
  "_shasum": "d10badfbb8f7bf1b1a990022087f9f0c014c44a7",
  "_shrinkwrap": null,
  "_spec": "document-register-element@github:dmarcos/document-register-element#8ccc532b7",
  "_where": "/Users/laurajeong/Desktop/dreamscape-desktop/node_modules/aframe",
  "author": {
    "name": "Andrea Giammarchi",
    "url": "http://webreflection.blogspot.com/"
  },
  "bugs": {
    "url": "https://github.com/WebReflection/document-register-element/issues"
  },
  "dependencies": {},
  "description": "A stand-alone working lightweight version of the W3C Custom Elements specification",
  "devDependencies": {
    "jshint": "~2.x",
    "phantomjs": "~1.x",
    "tiny-cdn": "~0.5.x",
    "uglify-js": "1.x",
    "wru": "~0.2.x"
  },
  "gitHead": "8ccc532b7f3744be954574caf3072a5fd260ca90",
  "homepage": "https://github.com/WebReflection/document-register-element",
  "keywords": [
    "Web",
    "Components",
    "Custom",
    "Element",
    "Elements",
    "DOM",
    "W3C",
    "Polymer",
    "polyfill",
    "alternative"
  ],
  "license": "MIT",
  "main": "./build/document-register-element.js",
  "name": "document-register-element",
  "optionalDependencies": {},
  "readme": "document-register-element\n=========================\n\nA stand-alone working lightweight version of the [W3C Custom Elements](http://w3c.github.io/webcomponents/spec/custom/) specification.\n\n\n[![build status](https://travis-ci.org/WebReflection/document-register-element.svg)](https://travis-ci.org/WebReflection/document-register-element)\n\n\n### How\n\n`npm install document-register-element` will put [build/document-register-element.js](build/document-register-element.js) inside `node_modules/document-register-element/` of your project.\n\nIf you're working with a tool like Browserify, Webpack, RequireJS, etc, you can\nimport the script at some point before you need to use the API.\n\n```js\nimport 'document-register-element' // ES2015\n// or\nrequire('document-register-element') // CommonJS\n// or\ndefine(['document-register-element'], function() {}) // AMD\n```\n\nIf you're not using a module system, just place\n`node_modules/document-register-element/build/document-register-element.js`\nsomewhere where it will be served by your server, then put\n\n```html\n<script src=\"/path/to/document-register-element.js\"></script>\n```\n\nin your head element and you should be good to go.\n\n#### via CDN\nMany thanks to [cdnjs](http://www.cdnjs.com) for hosting this script. Following an example on how to include it.\n```html\n<script\n  src=\"//cdnjs.cloudflare.com/ajax/libs/document-register-element/0.5.3/document-register-element.js\"\n>/* W3C Custom Elements */</script>\n```\n\n### TL;DR does it work ?\nIf you [see the first clock ticking](http://webreflection.github.io/document-register-element/test/examples/x-clock.html), the TL;DR answer is yes.\n\n\n### Usage Example\n\nA basic HTML example page\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>testing my-element</title>\n  <script src=\"js/document-register-element.js\"></script>\n  <script src=\"js/my-element.js\"></script>\n</head>\n<body>\n  <my-element>\n    some content\n  </my-element>\n</body>\n```\n\nwith the following `my-element.js` content\n```javascript\nvar MyElement = document.registerElement(\n  'my-element',\n  {\n    prototype: Object.create(\n      HTMLElement.prototype, {\n      createdCallback: {value: function() {\n        console.log('here I am ^_^ ');\n        console.log('with content: ', this.textContent);\n      }},\n      attachedCallback: {value: function() {\n        console.log('live on DOM ;-) ');\n      }},\n      detachedCallback: {value: function() {\n        console.log('leaving the DOM :-( )');\n      }},\n      attributeChangedCallback: {value: function(\n        name, previousValue, value\n      ) {\n        if (previousValue == null) {\n          console.log(\n            'got a new attribute ', name,\n            ' with value ', value\n          );\n        } else if (value == null) {\n          console.log(\n            'somebody removed ', name,\n            ' its value was ', previousValue\n          );\n        } else {\n          console.log(\n            name,\n            ' changed from ', previousValue,\n            ' to ', value\n          );\n        }\n      }}\n    })\n  }\n);\n```\n\n\n### Why\nI wrote a [couple](http://webreflection.blogspot.co.uk/2014/07/a-w3c-custom-elements-alternative.html) of blog [posts](http://webreflection.blogspot.co.uk/2015/03/bringing-custom-elements-to-ie8.html) about this polyfill, and here's the quick summary:\n\n* [document-register-element.js](build/document-register-element.js) is a stand alone polyfill which aims to support as many browsers as possible, without requiring extra dependencies at all, all in about **3KB** minified and gzipped.\n\nAdd if you want the [dom4](https://github.com/WebReflection/dom4#dom4) normalizer, and you'll find yourself in a modern DOM environment that works reliably with today's browsers, with an eye always open on performance.\n\n\n\n### Tested On\n\nThe [live test page](http://webreflection.github.io/document-register-element/test/) is here, containing all tests as listed in [the test file](test/document-register-element.js).\n\nThe following list of **desktop** browsers has been successfully tested:\n\n  * Chrome\n  * Firefox\n  * IE 8 or greater (please read about IE8 caveats)\n  * Safari\n  * Opera\n\nThe following list of **mobile** OS has been successfully tested:\n\n  * iOS 5.1 or greater\n  * Android 2.2 or greater\n  * FirefoxOS 1.1 or greater\n  * KindleFire 3 or greater\n  * Windows Phone 7 or greater\n  * Opera Mobile 12 or greater\n  * Blackberry OS 7* and OS 10\n  * webOS 2 or LG TV\n  * Samsung Bada OS 2 or greater\n  * NOKIA Asha with Express Browser\n\nThe good old [BB OS 7](http://us.blackberry.com/software/smartphones/blackberry-7-os.html) is the only one failing the test with `className` which is not notified as `attributeChanged` when it's changed. This means BB OS 7 will also fail with `id`, however changing `id` at runtime has never been a common or useful pattern.\n\n\n### Common Issues + Caveat\nHere a list of gotchas you might encounter when developing *CustomElement* components.\n\n#### HTML{TABLE|ROW|INPUT|SELECT|others...}Element\nAs described in [issue 6](https://github.com/WebReflection/document-register-element/issues/6) it's not possible to fully inherit a table, input, select, or other special element behaviors.\n```js\n// This will NOT work as expected\ndocument.registerElement(\n  'my-input',\n  {\n    prototype: Object.create(\n      HTMLInputElement.prototype\n    )\n  }\n);\n\nvar mi = document.createElement('my-input');\n```\n\nThe correct way to properly implement a custom input that will be also backward compatible is the following one:\n```js\n// This will NOT work as expected\ndocument.registerElement(\n  'my-input',\n  {\n    extends: 'input', // <== IMPORTANT\n    prototype: Object.create(\n      HTMLInputElement.prototype\n    )\n  }\n);\n\n// how to create the input\nvar mi = document.createElement(\n  'input',    // the extend\n  'my-input'  // the enriched custom definition\n);\n```\n\nAnother approach is to use just a basic `HTMLElement` component and initialize its content at runtime.\n```js\ndocument.registerElement(\n  'my-input',\n  {\n    prototype: Object.create(\n      HTMLElement.prototype,\n      {\n        createdCallback: {value: function () {\n          // here the input\n          this.el = this.appendChild(\n            document.createElement('input')\n          );\n        }}\n      }\n    )\n  }\n);\n\nvar mi = document.createElement('my-input');\n```\nIn this case every method that wants to interact with the input will refer `this.el` instead of just `this`.\n\n\n#### Using `innerHTML`\nIn order to avoid huge performance impact, native behavior overwrite problems and incompatibilities, there is now a [helper script](https://github.com/WebReflection/document-register-element/blob/master/build/innerHTML.max.js),\nwhich aim is to make **off-line custom elements creation** possible using template strings instead of needing manual `document.createElement` replacements.\n\nThe helper is a simple `innerHTML` function that returns the given node, after setting `innerHTML` and, in case the polyfill is used, initialize nodes.\n\nThis helper is needed in order to be aligned with native implementations, but please remember that `createdCallback` could be asynchronous, even if triggered ASAP after injecting HTML through this function.\n\n\n\n#### Changing the `style` property\n\nIf you change the style property via `node.style.cssText` or `node.style.backgroundColor = \"red\"` this change will most likely reflect through `node.getAttribute(\"style\")`.\n\nIn order to prevent footguns inside `attributeChangedCallback` invocations causing potential stack overflows, the `style` property has been filtered starting from version `0.1.1`, also reflecting current native implementation where changing this special property won't invoke the callback.\n\n(yes, even using `node.setAttribute(\"style\", \"value\")` that you shouldn't ... just use `node.style.cssText = \"value\"` instead)\n\n\n#### About IE8\n\nStarting from version `0.2.0` there is an experimental support for IE8.\nThere is a specific file that needs to be loaded in IE8 only upfront, plus a sequence of polyfills\nthat will be simply ignored by every browser but downloaded in IE8.\n\nPlease check [base.html file](examples/base.html) in order to have a basic model to reuse in case you want to support IE8.\n\nAll tests pass and there is a [map component example](http://webreflection.github.io/document-register-element/test/examples/x-map.html) that already works in IE8 too.\n\nRemember there are few things to consider when IE8 is a target but since it didn't cost many bytes\nto have it in, I've decided to merge the logic and maintain only one file that will work in IE8 too.\n\n\n#### IE8 caveats\n\n  * it's IE8\n  * all operations are batched and eventually executed ASAP but asynchronously. This behavior is closer to native Mutation Observers but might have some extra glitch in rendering time\n  * `className` is right now the only special attribute that reacts. Others might be implemented in the [dre-ie8-upfront-fix.js](src/dre-ie8-upfront-fix.js) file.\n  * in order to have node reacting to attributes changes, these must be live on the DOM\n  * if you are using `extends` when create a custom element, remember to minify the production code or wrap such reserved word in quotes\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/WebReflection/document-register-element.git"
  },
  "scripts": {
    "test": "phantomjs testrunner.js",
    "web": "node node_modules/tiny-cdn/tiny-cdn run -p=1337"
  },
  "version": "0.5.4"
}
