Object.defineProperty(exports,"__esModule",{value:true});var _defaults2=require("lodash/defaults");var _defaults3=_interopRequireDefault(_defaults2);var _isEqual2=require("lodash/isEqual");var _isEqual3=_interopRequireDefault(_isEqual2);var _isFunction2=require("lodash/isFunction");var _isFunction3=_interopRequireDefault(_isFunction2);var _throttle2=require("lodash/throttle");var _throttle3=_interopRequireDefault(_throttle2);var _assign2=require("lodash/assign");var _assign3=_interopRequireDefault(_assign2);var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _victoryCore=require("victory-core");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}



var Helpers={
withinBounds:function withinBounds(point,bounds,padding){var
x1=bounds.x1,x2=bounds.x2,y1=bounds.y1,y2=bounds.y2;var
x=point.x,y=point.y;
padding=padding?padding/2:0;
return x+padding>=Math.min(x1,x2)&&
x-padding<=Math.max(x1,x2)&&
y+padding>=Math.min(y1,y2)&&
y-padding<=Math.max(y1,y2);
},

getDomainBox:function getDomainBox(props,fullDomain,selectedDomain){var
dimension=props.dimension,scale=props.scale;
fullDomain=(0,_defaults3.default)({},fullDomain,props.domain);
selectedDomain=(0,_defaults3.default)({},selectedDomain,fullDomain);
var fullCoordinates=_victoryCore.Selection.getDomainCoordinates(scale,fullDomain);
var selectedCoordinates=_victoryCore.Selection.getDomainCoordinates(scale,selectedDomain);

return{
x1:dimension!=="y"?Math.min.apply(Math,_toConsumableArray(selectedCoordinates.x)):Math.min.apply(Math,_toConsumableArray(fullCoordinates.x)),
x2:dimension!=="y"?Math.max.apply(Math,_toConsumableArray(selectedCoordinates.x)):Math.max.apply(Math,_toConsumableArray(fullCoordinates.x)),
y1:dimension!=="x"?Math.min.apply(Math,_toConsumableArray(selectedCoordinates.y)):Math.min.apply(Math,_toConsumableArray(fullCoordinates.y)),
y2:dimension!=="x"?Math.max.apply(Math,_toConsumableArray(selectedCoordinates.y)):Math.max.apply(Math,_toConsumableArray(fullCoordinates.y))};

},

getHandles:function getHandles(props,domainBox){var
x1=domainBox.x1,x2=domainBox.x2,y1=domainBox.y1,y2=domainBox.y2;
var minX=Math.min(x1,x2);
var maxX=Math.max(x1,x2);
var minY=Math.min(y1,y2);
var maxY=Math.max(y1,y2);
var handleWidth=props.handleWidth/2;
return{
left:{x1:minX-handleWidth,x2:minX+handleWidth,y1:y1,y2:y2},
right:{x1:maxX-handleWidth,x2:maxX+handleWidth,y1:y1,y2:y2},
top:{x1:x1,x2:x2,y1:minY+handleWidth,y2:minY-handleWidth},
bottom:{x1:x1,x2:x2,y1:maxY+handleWidth,y2:maxY-handleWidth}};

},

getActiveHandles:function getActiveHandles(point,props,domainBox){var _this=this;
var handles=this.getHandles(props,domainBox);
var activeHandles=["top","bottom","left","right"].reduce(function(memo,opt){
memo=_this.withinBounds(point,handles[opt])?memo.concat(opt):memo;
return memo;
},[]);
return activeHandles.length&&activeHandles;
},

getResizeMutation:function getResizeMutation(box,handles){var
x1=box.x1,y1=box.y1,x2=box.x2,y2=box.y2;
var mutations={
left:{x1:Math.max(x1,x2),x2:Math.min(x1,x2),y1:y1,y2:y2},
right:{x1:Math.min(x1,x2),x2:Math.max(x1,x2),y1:y1,y2:y2},
top:{y1:Math.max(y1,y2),y2:Math.min(y1,y2),x1:x1,x2:x2},
bottom:{y1:Math.min(y1,y2),y2:Math.max(y1,y2),x1:x1,x2:x2}};

return handles.reduce(function(memo,current){
return(0,_assign3.default)(memo,mutations[current]);
},{});
},

getMinimumDomain:function getMinimumDomain(){
return{x:[0,1/Number.MAX_SAFE_INTEGER],y:[0,1/Number.MAX_SAFE_INTEGER]};
},

getSelectionMutation:function getSelectionMutation(point,box,dimension){var
x=point.x,y=point.y;var
x1=box.x1,x2=box.x2,y1=box.y1,y2=box.y2;
return{
x1:dimension!=="y"?x:x1,
y1:dimension!=="x"?y:y1,
x2:dimension!=="y"?x:x2,
y2:dimension!=="x"?y:y2};

},

panBox:function panBox(props,point){var
dimension=props.dimension,domain=props.domain,startX=props.startX,startY=props.startY;
var selectedDomain=(0,_defaults3.default)({},props.selectedDomain,domain);
var fullDomain=(0,_defaults3.default)({},props.fullDomain,domain);var _ref=
props.x1?
props:this.getDomainBox(props,fullDomain,selectedDomain),x1=_ref.x1,x2=_ref.x2,y1=_ref.y1,y2=_ref.y2;var

x=point.x,y=point.y;
var delta={
x:startX?startX-x:0,
y:startY?startY-y:0};

return{
x1:dimension!=="y"?Math.min(x1,x2)-delta.x:Math.min(x1,x2),
x2:dimension!=="y"?Math.max(x1,x2)-delta.x:Math.max(x1,x2),
y1:dimension!=="x"?Math.min(y1,y2)-delta.y:Math.min(y1,y2),
y2:dimension!=="x"?Math.max(y1,y2)-delta.y:Math.max(y1,y2)};

},

constrainBox:function constrainBox(box,fullDomainBox){var
x1=fullDomainBox.x1,y1=fullDomainBox.y1,x2=fullDomainBox.x2,y2=fullDomainBox.y2;
return{
x1:box.x2>x2?x2-Math.abs(box.x2-box.x1):Math.max(box.x1,x1),
y1:box.y2>y2?y2-Math.abs(box.y2-box.y1):Math.max(box.y1,y1),
x2:box.x1<x1?x1+Math.abs(box.x2-box.x1):Math.min(box.x2,x2),
y2:box.y1<y1?y1+Math.abs(box.y2-box.y1):Math.min(box.y2,y2)};

},

onMouseDown:function onMouseDown(evt,targetProps){var _this2=this;
evt.preventDefault();var

dimension=
targetProps.dimension,handleWidth=targetProps.handleWidth,onDomainChange=targetProps.onDomainChange,cachedSelectedDomain=targetProps.cachedSelectedDomain,domain=targetProps.domain;
var selectedDomain=(0,_defaults3.default)({},targetProps.selectedDomain,domain);
var fullDomainBox=targetProps.fullDomainBox||
this.getDomainBox(targetProps,domain);
var currentDomain=(0,_isEqual3.default)(selectedDomain,cachedSelectedDomain)?
targetProps.currentDomain||selectedDomain||domain:selectedDomain||domain;var _Selection$getSVGEven=
_victoryCore.Selection.getSVGEventCoordinates(evt),x=_Selection$getSVGEven.x,y=_Selection$getSVGEven.y;

if(!this.withinBounds({x:x,y:y},fullDomainBox,handleWidth)){
return{};
}
var domainBox=this.getDomainBox(targetProps,domain,currentDomain);
var activeHandles=this.getActiveHandles({x:x,y:y},targetProps,domainBox);

if(activeHandles){
return[{
target:"parent",
mutation:function mutation(){
return _extends({
isSelecting:true,domainBox:domainBox,fullDomainBox:fullDomainBox,
cachedSelectedDomain:selectedDomain,currentDomain:currentDomain},
_this2.getResizeMutation(domainBox,activeHandles));

}}];

}else if(
this.withinBounds({x:x,y:y},domainBox)&&
!(0,_isEqual3.default)(domain,currentDomain))
{


return[{
target:"parent",
mutation:function mutation(){return{
isPanning:true,startX:x,startY:y,domainBox:domainBox,fullDomainBox:fullDomainBox,currentDomain:currentDomain,
cachedSelectedDomain:selectedDomain};}}];


}else{


var minimumDomain=this.getMinimumDomain();
if((0,_isFunction3.default)(onDomainChange)){
onDomainChange(minimumDomain);
}
return[{
target:"parent",
mutation:function mutation(){
return _extends({
isSelecting:true,domainBox:domainBox,fullDomainBox:fullDomainBox,
cachedSelectedDomain:selectedDomain,
currentDomain:_this2.getMinimumDomain()},
_this2.getSelectionMutation({x:x,y:y},domainBox,dimension));

}}];

}
},

onMouseMove:function onMouseMove(evt,targetProps){

if(!targetProps.isPanning&&!targetProps.isSelecting){
return{};
}var

dimension=
targetProps.dimension,scale=targetProps.scale,isPanning=targetProps.isPanning,isSelecting=targetProps.isSelecting,fullDomainBox=targetProps.fullDomainBox,onDomainChange=targetProps.onDomainChange;var _Selection$getSVGEven2=
_victoryCore.Selection.getSVGEventCoordinates(evt),x=_Selection$getSVGEven2.x,y=_Selection$getSVGEven2.y;

if(!this.withinBounds({x:x,y:y},fullDomainBox)){
return{};
}
if(isPanning){var
startX=targetProps.startX,startY=targetProps.startY;
var pannedBox=this.panBox(targetProps,{x:x,y:y});
var constrainedBox=this.constrainBox(pannedBox,fullDomainBox);
var currentDomain=_victoryCore.Selection.getBounds(_extends({},constrainedBox,{scale:scale}));
if((0,_isFunction3.default)(onDomainChange)){
onDomainChange(currentDomain);
}
return[{
target:"parent",
mutation:function mutation(){
return _extends({
currentDomain:currentDomain,
startX:pannedBox.x2>=fullDomainBox.x2||pannedBox.x1<=fullDomainBox.x1?
startX:x,
startY:pannedBox.y2>=fullDomainBox.y2||pannedBox.y1<=fullDomainBox.y1?
startY:y},
constrainedBox);

}}];

}else if(isSelecting){
var x2=dimension!=="y"?x:targetProps.x2;
var y2=dimension!=="x"?y:targetProps.y2;
var _currentDomain=
_victoryCore.Selection.getBounds({x2:x2,y2:y2,x1:targetProps.x1,y1:targetProps.y1,scale:scale});
if((0,_isFunction3.default)(onDomainChange)){
onDomainChange(_currentDomain);
}
return[{
target:"parent",
mutation:function mutation(){
return{
x2:x2,y2:y2,currentDomain:_currentDomain};

}}];

}
},

onMouseUp:function onMouseUp(evt,targetProps){var
x1=targetProps.x1,y1=targetProps.y1,x2=targetProps.x2,y2=targetProps.y2,onDomainChange=targetProps.onDomainChange,domain=targetProps.domain;

if(x1===x2||y1===y2){
if((0,_isFunction3.default)(onDomainChange)){
onDomainChange(domain);
}
return[{
target:"parent",
mutation:function mutation(){
return{
isPanning:false,isSelecting:false,currentDomain:domain};

}}];

}
return[{
target:"parent",
mutation:function mutation(){return{isPanning:false,isSelecting:false};}}];

},

onMouseLeave:function onMouseLeave(){
return[{
target:"parent",
mutation:function mutation(){return{isPanning:false,isSelecting:false};}}];

}};exports.default=


{
onMouseDown:Helpers.onMouseDown.bind(Helpers),
onMouseUp:Helpers.onMouseUp.bind(Helpers),
onMouseLeave:Helpers.onMouseLeave.bind(Helpers),
onMouseMove:(0,_throttle3.default)(Helpers.onMouseMove.bind(Helpers),16,{leading:true})};